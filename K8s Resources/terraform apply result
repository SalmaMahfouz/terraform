controlplane ~/terraform_challenge âžœ  terraform plan

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # kubernetes_deployment.frontend will be created
  + resource "kubernetes_deployment" "frontend" {
  	+ id           	= (known after apply)
  	+ wait_for_rollout = true

  	+ metadata {
      	+ generation   	= (known after apply)
      	+ labels       	= {
          	+ "name" = "frontend"
        	}
      	+ name         	= "frontend"
      	+ namespace    	= "default"
      	+ resource_version = (known after apply)
      	+ uid          	= (known after apply)
    	}

  	+ spec {
      	+ min_ready_seconds     	= 0
      	+ paused                	= false
      	+ progress_deadline_seconds = 600
      	+ replicas              	= "4"
      	+ revision_history_limit	= 10

      	+ selector {
          	+ match_labels = {
              	+ "name" = "webapp"
            	}
        	}

      	+ strategy {
          	+ type = (known after apply)

          	+ rolling_update {
              	+ max_surge   	= (known after apply)
              	+ max_unavailable = (known after apply)
            	}
        	}

      	+ template {
          	+ metadata {
              	+ generation   	= (known after apply)
              	+ labels       	= {
                  	+ "name" = "webapp"
                	}
              	+ name         	= (known after apply)
              	+ resource_version = (known after apply)
              	+ uid          	= (known after apply)
            	}

          	+ spec {
              	+ automount_service_account_token  = true
              	+ dns_policy                   	= "ClusterFirst"
              	+ enable_service_links         	= true
              	+ host_ipc                     	= false
              	+ host_network                 	= false
              	+ host_pid                     	= false
              	+ hostname                     	= (known after apply)
              	+ node_name                    	= (known after apply)
              	+ restart_policy               	= "Always"
              	+ service_account_name         	= (known after apply)
              	+ share_process_namespace      	= false
              	+ termination_grace_period_seconds = 30

              	+ container {
                  	+ image                  	= "kodekloud/webapp-color:v1"
                  	+ image_pull_policy      	= (known after apply)
                  	+ name                   	= "simple-webapp"
                  	+ stdin                  	= false
                  	+ stdin_once             	= false
                  	+ termination_message_path   = "/dev/termination-log"
                  	+ termination_message_policy = (known after apply)
                  	+ tty                    	= false

                  	+ port {
                      	+ container_port = 8080
                      	+ protocol   	= "TCP"
                    	}

                  	+ resources {
                      	+ limits   = (known after apply)
                      	+ requests = (known after apply)
                    	}
                	}

              	+ image_pull_secrets {
                  	+ name = (known after apply)
                	}

              	+ readiness_gate {
                  	+ condition_type = (known after apply)
                	}

              	+ volume {
                  	+ name = (known after apply)

                  	+ aws_elastic_block_store {
                      	+ fs_type   = (known after apply)
                      	+ partition = (known after apply)
                      	+ read_only = (known after apply)
                      	+ volume_id = (known after apply)
                    	}

                  	+ azure_disk {
                      	+ caching_mode  = (known after apply)
                      	+ data_disk_uri = (known after apply)
                      	+ disk_name 	= (known after apply)
                      	+ fs_type   	= (known after apply)
                      	+ kind      	= (known after apply)
                      	+ read_only 	= (known after apply)
                    	}

                  	+ azure_file {
                      	+ read_only    	= (known after apply)
                      	+ secret_name  	= (known after apply)
                      	+ secret_namespace = (known after apply)
                      	+ share_name   	= (known after apply)
                    	}

                  	+ ceph_fs {
                      	+ monitors	= (known after apply)
                      	+ path    	= (known after apply)
                      	+ read_only   = (known after apply)
                      	+ secret_file = (known after apply)
                      	+ user    	= (known after apply)

                      	+ secret_ref {
                          	+ name  	= (known after apply)
                          	+ namespace = (known after apply)
                        	}
                    	}

                  	+ cinder {
                      	+ fs_type   = (known after apply)
                      	+ read_only = (known after apply)
                      	+ volume_id = (known after apply)
                    	}

                  	+ config_map {
                      	+ default_mode = (known after apply)
                      	+ name     	= (known after apply)
                      	+ optional 	= (known after apply)

                      	+ items {
                          	+ key  = (known after apply)
                          	+ mode = (known after apply)
                          	+ path = (known after apply)
                        	}
                    	}

                  	+ csi {
                      	+ driver        	= (known after apply)
                      	+ fs_type       	= (known after apply)
                      	+ read_only     	= (known after apply)
                      	+ volume_attributes = (known after apply)

                      	+ node_publish_secret_ref {
                          	+ name = (known after apply)
                        	}
                    	}

                  	+ downward_api {
                      	+ default_mode = (known after apply)

                      	+ items {
                          	+ mode = (known after apply)
                          	+ path = (known after apply)

                          	+ field_ref {
                              	+ api_version = (known after apply)
                              	+ field_path  = (known after apply)
                            	}

                          	+ resource_field_ref {
                              	+ container_name = (known after apply)
                              	+ divisor    	= (known after apply)
                              	+ resource   	= (known after apply)
                            	}
                        	}
                    	}

                  	+ empty_dir {
                      	+ medium 	= (known after apply)
                      	+ size_limit = (known after apply)
                    	}

                  	+ fc {
                      	+ fs_type  	= (known after apply)
                      	+ lun      	= (known after apply)
                      	+ read_only	= (known after apply)
                      	+ target_ww_ns = (known after apply)
                    	}

                  	+ flex_volume {
                      	+ driver	= (known after apply)
                      	+ fs_type   = (known after apply)
                      	+ options   = (known after apply)
                      	+ read_only = (known after apply)

                      	+ secret_ref {
                          	+ name  	= (known after apply)
                          	+ namespace = (known after apply)
                        	}
                    	}

                  	+ flocker {
                      	+ dataset_name = (known after apply)
                      	+ dataset_uuid = (known after apply)
                    	}

                  	+ gce_persistent_disk {
                      	+ fs_type   = (known after apply)
                      	+ partition = (known after apply)
                      	+ pd_name   = (known after apply)
                      	+ read_only = (known after apply)
                    	}

                  	+ git_repo {
                      	+ directory  = (known after apply)
                      	+ repository = (known after apply)
                      	+ revision   = (known after apply)
                    	}

                  	+ glusterfs {
                      	+ endpoints_name = (known after apply)
                      	+ path       	= (known after apply)
                      	+ read_only  	= (known after apply)
                    	}

                  	+ host_path {
                      	+ path = (known after apply)
                      	+ type = (known after apply)
                    	}

                  	+ iscsi {
                      	+ fs_type     	= (known after apply)
                      	+ iqn         	= (known after apply)
                      	+ iscsi_interface = (known after apply)
                      	+ lun         	= (known after apply)
                      	+ read_only   	= (known after apply)
                      	+ target_portal   = (known after apply)
                    	}

                  	+ local {
                      	+ path = (known after apply)
                    	}

                  	+ nfs {
                      	+ path  	= (known after apply)
                      	+ read_only = (known after apply)
                      	+ server	= (known after apply)
                    	}

                  	+ persistent_volume_claim {
                      	+ claim_name = (known after apply)
                      	+ read_only  = (known after apply)
                    	}

                  	+ photon_persistent_disk {
                      	+ fs_type = (known after apply)
                      	+ pd_id   = (known after apply)
                    	}

                  	+ projected {
                      	+ default_mode = (known after apply)

                      	+ sources {
                          	+ config_map {
                              	+ name 	= (known after apply)
                              	+ optional = (known after apply)

                              	+ items {
                                  	+ key  = (known after apply)
                                  	+ mode = (known after apply)
                                  	+ path = (known after apply)
                                	}
                            	}

                          	+ downward_api {
                              	+ items {
                                  	+ mode = (known after apply)
                                  	+ path = (known after apply)

                                  	+ field_ref {
                                      	+ api_version = (known after apply)
                                      	+ field_path  = (known after apply)
                                    	}

                                  	+ resource_field_ref {
                                      	+ container_name = (known after apply)
                                      	+ divisor    	= (known after apply)
                                      	+ resource   	= (known after apply)
                                    	}
                                	}
                            	}

                          	+ secret {
                              	+ name 	= (known after apply)
                              	+ optional = (known after apply)

                              	+ items {
                                  	+ key  = (known after apply)
                                  	+ mode = (known after apply)
                                  	+ path = (known after apply)
                                	}
                            	}

                          	+ service_account_token {
                              	+ audience       	= (known after apply)
                              	+ expiration_seconds = (known after apply)
                              	+ path           	= (known after apply)
                            	}
                        	}
                    	}

                  	+ quobyte {
                      	+ group 	= (known after apply)
                      	+ read_only = (known after apply)
                      	+ registry  = (known after apply)
                      	+ user  	= (known after apply)
                      	+ volume	= (known after apply)
                    	}

                  	+ rbd {
                      	+ ceph_monitors = (known after apply)
                      	+ fs_type   	= (known after apply)
                      	+ keyring   	= (known after apply)
                      	+ rados_user	= (known after apply)
                      	+ rbd_image 	= (known after apply)
                      	+ rbd_pool  	= (known after apply)
                      	+ read_only 	= (known after apply)

                      	+ secret_ref {
                          	+ name  	= (known after apply)
                          	+ namespace = (known after apply)
                        	}
                    	}

                  	+ secret {
                      	+ default_mode = (known after apply)
                      	+ optional 	= (known after apply)
                      	+ secret_name  = (known after apply)

                      	+ items {
                          	+ key  = (known after apply)
                          	+ mode = (known after apply)
                          	+ path = (known after apply)
                        	}
                    	}

                  	+ vsphere_volume {
                      	+ fs_type 	= (known after apply)
                      	+ volume_path = (known after apply)
                    	}
                	}
            	}
        	}
    	}
	}

  # kubernetes_service.webapp-service will be created
  + resource "kubernetes_service" "webapp-service" {
  	+ id                 	= (known after apply)
  	+ status             	= (known after apply)
  	+ wait_for_load_balancer = true

  	+ metadata {
      	+ generation   	= (known after apply)
      	+ name         	= "webapp-service"
      	+ namespace    	= "default"
      	+ resource_version = (known after apply)
      	+ uid          	= (known after apply)
    	}

  	+ spec {
      	+ cluster_ip              	= (known after apply)
      	+ external_traffic_policy 	= (known after apply)
      	+ health_check_node_port  	= (known after apply)
      	+ ip_families             	= (known after apply)
      	+ ip_family_policy        	= (known after apply)
      	+ publish_not_ready_addresses = false
      	+ selector                	= {
          	+ "app" = "webapp"
        	}
      	+ session_affinity        	= "None"
      	+ type                    	= "NodePort"

      	+ port {
          	+ node_port   = 30080
          	+ port    	= 8080
          	+ protocol	= "TCP"
          	+ target_port = "8080"
        	}
    	}
	}

Plan: 2 to add, 0 to change, 0 to destroy.

â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€

Note: You didn't use the -out option to save this plan, so Terraform can't guarantee to take exactly these actions if you run "terraform apply"
now.
 
controlplane ~/terraform_challenge âžœ  terraform apply

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # kubernetes_deployment.frontend will be created
  + resource "kubernetes_deployment" "frontend" {
  	+ id           	= (known after apply)
  	+ wait_for_rollout = true

  	+ metadata {
      	+ generation   	= (known after apply)
      	+ labels       	= {
          	+ "name" = "frontend"
        	}
      	+ name         	= "frontend"
      	+ namespace    	= "default"
      	+ resource_version = (known after apply)
      	+ uid          	= (known after apply)
    	}

  	+ spec {
      	+ min_ready_seconds     	= 0
      	+ paused                	= false
      	+ progress_deadline_seconds = 600
      	+ replicas              	= "4"
      	+ revision_history_limit	= 10

      	+ selector {
          	+ match_labels = {
              	+ "name" = "webapp"
            	}
        	}

      	+ strategy {
          	+ type = (known after apply)

          	+ rolling_update {
              	+ max_surge   	= (known after apply)
              	+ max_unavailable = (known after apply)
            	}
        	}

      	+ template {
          	+ metadata {
              	+ generation   	= (known after apply)
              	+ labels       	= {
                  	+ "name" = "webapp"
                	}
              	+ name         	= (known after apply)
              	+ resource_version = (known after apply)
              	+ uid          	= (known after apply)
            	}

          	+ spec {
              	+ automount_service_account_token  = true
              	+ dns_policy                   	= "ClusterFirst"
              	+ enable_service_links         	= true
              	+ host_ipc                     	= false
              	+ host_network                 	= false
              	+ host_pid                     	= false
              	+ hostname                     	= (known after apply)
              	+ node_name                    	= (known after apply)
              	+ restart_policy               	= "Always"
              	+ service_account_name         	= (known after apply)
              	+ share_process_namespace      	= false
              	+ termination_grace_period_seconds = 30

              	+ container {
                  	+ image                  	= "kodekloud/webapp-color:v1"
                  	+ image_pull_policy      	= (known after apply)
                  	+ name                   	= "simple-webapp"
                  	+ stdin                  	= false
                  	+ stdin_once             	= false
                  	+ termination_message_path   = "/dev/termination-log"
                  	+ termination_message_policy = (known after apply)
                  	+ tty                    	= false

                  	+ port {
                      	+ container_port = 8080
                      	+ protocol   	= "TCP"
                    	}

                  	+ resources {
                      	+ limits   = (known after apply)
                      	+ requests = (known after apply)
                    	}
                	}

              	+ image_pull_secrets {
                  	+ name = (known after apply)
                	}

              	+ readiness_gate {
                  	+ condition_type = (known after apply)
                	}

              	+ volume {
                  	+ name = (known after apply)

                  	+ aws_elastic_block_store {
                      	+ fs_type   = (known after apply)
                      	+ partition = (known after apply)
                      	+ read_only = (known after apply)
                      	+ volume_id = (known after apply)
                    	}

                  	+ azure_disk {
                      	+ caching_mode  = (known after apply)
                      	+ data_disk_uri = (known after apply)
                      	+ disk_name 	= (known after apply)
                      	+ fs_type   	= (known after apply)
                      	+ kind      	= (known after apply)
                      	+ read_only 	= (known after apply)
                    	}

                  	+ azure_file {
                      	+ read_only    	= (known after apply)
                      	+ secret_name  	= (known after apply)
                      	+ secret_namespace = (known after apply)
                      	+ share_name   	= (known after apply)
                    	}

                  	+ ceph_fs {
                      	+ monitors	= (known after apply)
                      	+ path    	= (known after apply)
                      	+ read_only   = (known after apply)
                      	+ secret_file = (known after apply)
                      	+ user    	= (known after apply)

                      	+ secret_ref {
                          	+ name  	= (known after apply)
                          	+ namespace = (known after apply)
                        	}
                    	}

                  	+ cinder {
                      	+ fs_type   = (known after apply)
                      	+ read_only = (known after apply)
                      	+ volume_id = (known after apply)
                    	}

                  	+ config_map {
                      	+ default_mode = (known after apply)
                      	+ name     	= (known after apply)
                      	+ optional 	= (known after apply)

                      	+ items {
                          	+ key  = (known after apply)
                          	+ mode = (known after apply)
                          	+ path = (known after apply)
                        	}
                    	}

                  	+ csi {
                      	+ driver        	= (known after apply)
                      	+ fs_type       	= (known after apply)
                      	+ read_only     	= (known after apply)
                      	+ volume_attributes = (known after apply)

                      	+ node_publish_secret_ref {
                          	+ name = (known after apply)
                        	}
                    	}

                  	+ downward_api {
                      	+ default_mode = (known after apply)

                      	+ items {
                          	+ mode = (known after apply)
                          	+ path = (known after apply)

                          	+ field_ref {
                              	+ api_version = (known after apply)
                              	+ field_path  = (known after apply)
                            	}

                          	+ resource_field_ref {
                              	+ container_name = (known after apply)
                              	+ divisor    	= (known after apply)
                              	+ resource   	= (known after apply)
                            	}
                        	}
                    	}

                  	+ empty_dir {
                      	+ medium 	= (known after apply)
                      	+ size_limit = (known after apply)
                    	}

                  	+ fc {
                      	+ fs_type  	= (known after apply)
                      	+ lun      	= (known after apply)
                      	+ read_only	= (known after apply)
                      	+ target_ww_ns = (known after apply)
                    	}

                  	+ flex_volume {
                      	+ driver	= (known after apply)
                      	+ fs_type   = (known after apply)
                      	+ options   = (known after apply)
                      	+ read_only = (known after apply)

                      	+ secret_ref {
                          	+ name  	= (known after apply)
                          	+ namespace = (known after apply)
                        	}
                    	}

                  	+ flocker {
                      	+ dataset_name = (known after apply)
                      	+ dataset_uuid = (known after apply)
                    	}

                  	+ gce_persistent_disk {
                      	+ fs_type   = (known after apply)
                      	+ partition = (known after apply)
                      	+ pd_name   = (known after apply)
                      	+ read_only = (known after apply)
                    	}

                  	+ git_repo {
                      	+ directory  = (known after apply)
                      	+ repository = (known after apply)
                      	+ revision   = (known after apply)
                    	}

                  	+ glusterfs {
                      	+ endpoints_name = (known after apply)
                      	+ path       	= (known after apply)
                      	+ read_only  	= (known after apply)
                    	}

                  	+ host_path {
                      	+ path = (known after apply)
                      	+ type = (known after apply)
                    	}

                  	+ iscsi {
                      	+ fs_type     	= (known after apply)
                      	+ iqn         	= (known after apply)
                      	+ iscsi_interface = (known after apply)
                      	+ lun         	= (known after apply)
                      	+ read_only   	= (known after apply)
                      	+ target_portal   = (known after apply)
                    	}

                  	+ local {
                      	+ path = (known after apply)
                    	}

                  	+ nfs {
                      	+ path  	= (known after apply)
                      	+ read_only = (known after apply)
                      	+ server	= (known after apply)
                    	}

                  	+ persistent_volume_claim {
                      	+ claim_name = (known after apply)
                      	+ read_only  = (known after apply)
                    	}

                  	+ photon_persistent_disk {
                      	+ fs_type = (known after apply)
                      	+ pd_id   = (known after apply)
                    	}

                  	+ projected {
                      	+ default_mode = (known after apply)

                      	+ sources {
                          	+ config_map {
                              	+ name 	= (known after apply)
                              	+ optional = (known after apply)

                              	+ items {
                                  	+ key  = (known after apply)
                                  	+ mode = (known after apply)
                                  	+ path = (known after apply)
                                	}
                            	}

                          	+ downward_api {
                              	+ items {
                                  	+ mode = (known after apply)
                                  	+ path = (known after apply)

                                  	+ field_ref {
                                      	+ api_version = (known after apply)
                                      	+ field_path  = (known after apply)
                                    	}

                                  	+ resource_field_ref {
                                      	+ container_name = (known after apply)
                                      	+ divisor    	= (known after apply)
                                      	+ resource   	= (known after apply)
                                    	}
                                	}
                            	}

                          	+ secret {
                              	+ name 	= (known after apply)
                              	+ optional = (known after apply)

                              	+ items {
                                  	+ key  = (known after apply)
                                  	+ mode = (known after apply)
                                  	+ path = (known after apply)
                                	}
                            	}

                          	+ service_account_token {
                              	+ audience       	= (known after apply)
                              	+ expiration_seconds = (known after apply)
                              	+ path           	= (known after apply)
                            	}
                        	}
                    	}

                  	+ quobyte {
                      	+ group 	= (known after apply)
                      	+ read_only = (known after apply)
                      	+ registry  = (known after apply)
                      	+ user  	= (known after apply)
                      	+ volume	= (known after apply)
                    	}

                  	+ rbd {
                      	+ ceph_monitors = (known after apply)
                      	+ fs_type   	= (known after apply)
                      	+ keyring   	= (known after apply)
                      	+ rados_user	= (known after apply)
                      	+ rbd_image 	= (known after apply)
                      	+ rbd_pool  	= (known after apply)
                      	+ read_only 	= (known after apply)

                      	+ secret_ref {
                          	+ name  	= (known after apply)
                          	+ namespace = (known after apply)
                        	}
                    	}

                  	+ secret {
                      	+ default_mode = (known after apply)
                      	+ optional 	= (known after apply)
                      	+ secret_name  = (known after apply)

                      	+ items {
                          	+ key  = (known after apply)
                          	+ mode = (known after apply)
                          	+ path = (known after apply)
                        	}
                    	}

                  	+ vsphere_volume {
                      	+ fs_type 	= (known after apply)
                      	+ volume_path = (known after apply)
                    	}
                	}
            	}
        	}
    	}
	}

  # kubernetes_service.webapp-service will be created
  + resource "kubernetes_service" "webapp-service" {
  	+ id                 	= (known after apply)
  	+ status             	= (known after apply)
  	+ wait_for_load_balancer = true

  	+ metadata {
      	+ generation   	= (known after apply)
      	+ name         	= "webapp-service"
      	+ namespace    	= "default"
      	+ resource_version = (known after apply)
      	+ uid          	= (known after apply)
    	}

  	+ spec {
      	+ cluster_ip              	= (known after apply)
      	+ external_traffic_policy 	= (known after apply)
      	+ health_check_node_port  	= (known after apply)
      	+ ip_families             	= (known after apply)
      	+ ip_family_policy        	= (known after apply)
      	+ publish_not_ready_addresses = false
      	+ selector                	= {
          	+ "app" = "webapp"
        	}
      	+ session_affinity        	= "None"
      	+ type                    	= "NodePort"

      	+ port {
          	+ node_port   = 30080
          	+ port    	= 8080
          	+ protocol	= "TCP"
          	+ target_port = "8080"
        	}
    	}
	}

Plan: 2 to add, 0 to change, 0 to destroy.

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

kubernetes_deployment.frontend: Creating...
kubernetes_deployment.frontend: Still creating... [10s elapsed]
kubernetes_deployment.frontend: Creation complete after 16s [id=default/frontend]
kubernetes_service.webapp-service: Creating...
kubernetes_service.webapp-service: Creation complete after 0s [id=default/webapp-service]

Apply complete! Resources: 2 added, 0 changed, 0 destroyed.
